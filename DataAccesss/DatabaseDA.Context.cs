//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseDA : DbContext
    {
        public DatabaseDA()
            : base("name=DatabaseDA")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Configs> Configs { get; set; }
        public virtual DbSet<Languages> Languages { get; set; }
        public virtual DbSet<PermitDetails> PermitDetails { get; set; }
        public virtual DbSet<Permits> Permits { get; set; }
        public virtual DbSet<Permits_SystemUsers> Permits_SystemUsers { get; set; }
        public virtual DbSet<SystemUsers> SystemUsers { get; set; }
        public virtual DbSet<CategoryLevel1> CategoryLevel1 { get; set; }
        public virtual DbSet<CategoryLevel1_CategoryLevel2> CategoryLevel1_CategoryLevel2 { get; set; }
        public virtual DbSet<CategoryLevel2> CategoryLevel2 { get; set; }
        public virtual DbSet<Contents> Contents { get; set; }
        public virtual DbSet<Contents_CategoryLevel1> Contents_CategoryLevel1 { get; set; }
        public virtual DbSet<ExtendProperties> ExtendProperties { get; set; }
        public virtual DbSet<Albums> Albums { get; set; }
        public virtual DbSet<Files> Files { get; set; }
        public virtual DbSet<vw_CategoryLevel1ViewAll> vw_CategoryLevel1ViewAll { get; set; }
        public virtual DbSet<vw_CategoryLevel2ViewAll> vw_CategoryLevel2ViewAll { get; set; }
        public virtual DbSet<vw_ContentsViewAll> vw_ContentsViewAll { get; set; }
        public virtual DbSet<vw_FilesViewAll> vw_FilesViewAll { get; set; }
        public virtual DbSet<vw_PermitsViewAll> vw_PermitsViewAll { get; set; }
        public virtual DbSet<Sinhvien> Sinhvien { get; set; }
    
        [DbFunction("DatabaseDA", "SplitStringToTable")]
        public virtual IQueryable<SplitStringToTable_Result> SplitStringToTable(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitStringToTable_Result>("[DatabaseDA].[SplitStringToTable](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int GetAllInfoLogin_ByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllInfoLogin_ByEmail", emailParameter);
        }
    
        public virtual int GetAllInfoLogin_ByIDUsers(Nullable<long> systemUsers_ID)
        {
            var systemUsers_IDParameter = systemUsers_ID.HasValue ?
                new ObjectParameter("SystemUsers_ID", systemUsers_ID) :
                new ObjectParameter("SystemUsers_ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllInfoLogin_ByIDUsers", systemUsers_IDParameter);
        }
    
        public virtual int GetAllInfoLogin_ByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllInfoLogin_ByUserName", userNameParameter);
        }
    }
}
